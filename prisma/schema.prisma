// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  COMPANY
}

model Company {
  id       String  @id @default(uuid())
  businessName     String?
  nit String?

  sector SectorCompany?

  nameContact String?
  phoneContact    String? 
  email    String  @unique
  password String?
  isValid  Boolean @default(false)

  role   Role              @default(COMPANY)
  groups TrainingRequest[]

  collaborators Collaborator[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum SectorCompany {
  AGROPECUARIO
  SERVICIOS
  INDUSTRIAL
  TRANSPORTE
  COMERCIO
  FINANCIERO
  CONSTRUCCION
  MINEROYENERGETICO
  COMUNICACIONES
  OTRO
}

model ConfigurationSettings {
  id String @id @default(uuid())
  emailForNotifications String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingRequest {
  id String @id @default(uuid())

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  state     RequestTrainingStatus @default(PENDING)
  companyId String
  company   Company               @relation(fields: [companyId], references: [id])

  collaborators TrainingRequestCollaborator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, courseId])
}

enum RequestTrainingStatus {
  PENDING
  ACTIVE
  EXECUTED
  PROGRAMMED
  CANCELLED
}

model Collaborator {
  id       String  @id @default(uuid())
  fullname String
  numDoc   String
  email    String?
  phone    String?
  docType                       DocType                       @default(CC)

  identificationFile String?
  socialSecurityFile String?

  companyId                     String?
  company                       Company?                      @relation(fields: [companyId], references: [id])
  trainingRequestsCollaborators TrainingRequestCollaborator[]

  certificates Certificate[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

enum DocType {
  CC
  TI
  CE
}

model TrainingRequestCollaborator {
  // id String @id @default(uuid())

  collaboratorId String
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])

  trainingRequestId String
  trainingRequest   TrainingRequest @relation(fields: [trainingRequestId], references: [id])

  courseLevelId String?
  courseLevel   CourseLevel? @relation(fields: [courseLevelId], references: [id])

  startDate  DateTime?
  endDate    DateTime?

  wasCertified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([collaboratorId, trainingRequestId])
}

model Certificate {
  id String @id @default(uuid())

  collaboratorId String
  Collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])

  courseLevelId String
  courseLevel   CourseLevel @relation(fields: [courseLevelId], references: [id])

  date           DateTime?
  fileUrl        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([collaboratorId, courseLevelId])
}

model CourseLevel {
  id String @id @default(uuid())

  name String?

  courseId String
  course   Course @relation(fields: [courseId], references: [id])


  certificates Certificate[]

  active Boolean @default(true)

  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  TrainingRequestCollaborator TrainingRequestCollaborator[]

  @@index([courseId])
}

model Course {
  id String @id @default(uuid())

  name            String?
  courseLevels    CourseLevel[]
  trainingRequest TrainingRequest[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
