// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  COMPANY
}

model Company {
  id           String  @id @default(uuid())
  businessName String?
  nit          String?

  legalRepresentative String?
  sector              SectorCompany?

  nameContact  String?
  phoneContact String?
  email        String  @unique
  password     String?
  isValid      Boolean @default(false)

  role   Role              @default(COMPANY)
  groups TrainingRequest[]

  collaborators Collaborator[]

  certificateEvent CertificateEvent[]

  active Boolean @default(true)

  passwordResetTokens PasswordResetToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id      String    @id @default(uuid())
  token   String    @unique
  resetAt DateTime?

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())

  @@index([companyId])
}

enum SectorCompany {
  AGROPECUARIO
  SERVICIOS
  INDUSTRIAL
  TRANSPORTE
  COMERCIO
  FINANCIERO
  CONSTRUCCION
  MINEROYENERGETICO
  COMUNICACIONES
  OTRO
}

model ConfigurationSettings {
  id                    String  @id @default(uuid())
  emailForNotifications String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingRequest {
  id String @id @default(uuid())

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  state     RequestTrainingStatus @default(PENDING)
  companyId String
  company   Company               @relation(fields: [companyId], references: [id])

  collaborators TrainingRequestCollaborator[]

  activeFrom DateTime?

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([courseId])
}

enum RequestTrainingStatus {
  PENDING
  ACTIVE
  EXECUTED
  CANCELLED
}

model Collaborator {
  id       String  @id @default(uuid())
  fullname String
  numDoc   String
  email    String?
  phone    String?
  docType  DocType @default(CC)

  identificationFile String?
  socialSecurityFile String?
  arlName            String?

  companyId                     String?
  company                       Company?                      @relation(fields: [companyId], references: [id])
  trainingRequestsCollaborators TrainingRequestCollaborator[]

  documents CollaboratorCourseLevelDocument[]

  certificates Certificate[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

enum DocType {
  CC
  TI
  CE
}

model TrainingRequestCollaborator {
  // id String @id @default(uuid())

  collaboratorId String
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])

  trainingRequestId String
  trainingRequest   TrainingRequest @relation(fields: [trainingRequestId], references: [id])

  courseLevelId String?
  courseLevel   CourseLevel? @relation(fields: [courseLevelId], references: [id])

  isDisallowed Boolean   @default(false)
  isScheduled  Boolean   @default(false)
  startDate    DateTime?
  endDate      DateTime?

  suggestedDate DateTime?

  wasCertified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([collaboratorId, trainingRequestId])
  @@index([collaboratorId])
  @@index([trainingRequestId])
  @@index([courseLevelId])
}

model Certificate {
  id String @id @default(uuid())

  collaboratorId String
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])

  courseLevelId String
  courseLevel   CourseLevel @relation(fields: [courseLevelId], references: [id])

  coachId String?
  coach   Coach?  @relation(fields: [coachId], references: [id])

  fileUrl String?

  collaboratorFullname String?
  collaboratorNumDoc   String?
  collaboratorTypeDoc  DocType?
  collaboratorArlName  String?
  companyName          String?
  legalRepresentative  String?
  companyNit           String?

  courseName     String?
  levelName      String?
  resolution     String?
  levelHours     Int?
  monthsToExpire Int?

  coachName String?
  coachPosition String?
  coachLicence String?
  coachImgSignatureUrl String?

  certificateDate DateTime?
  expeditionDate  DateTime?
  dueDate         DateTime?

  active Boolean @default(true)

  certificateEvent CertificateEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([collaboratorId])
  @@index([courseLevelId])
  @@index([coachId])
}

enum EventType {
  UPDATED
  CREATED
}

model CertificateEvent {
  id              String    @id @default(uuid())
  eventType       EventType
  certificateData String?   @db.Text

  certificateId String
  certificate   Certificate @relation(fields: [certificateId], references: [id])

  adminId String
  admin   Company? @relation(fields: [adminId], references: [id])

  createdAt DateTime @default(now())

  @@index([certificateId])
  @@index([adminId])
}

model CourseLevel {
  id String @id @default(uuid())

  name String?

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  hours Int?

  requiredDocuments RequiredDocument[]

  certificates Certificate[]

  monthsToExpire Int? @default(0)

  active Boolean @default(true)

  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  TrainingRequestCollaborator TrainingRequestCollaborator[]

  @@index([courseId])
}

model Course {
  id String @id @default(uuid())

  name            String?
  shortName       String?
  resolution      String?
  courseLevels    CourseLevel[]
  trainingRequest TrainingRequest[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequiredDocument {
  id String @id @default(uuid())

  name String

  courseLevelId String?
  courseLevels  CourseLevel? @relation(fields: [courseLevelId], references: [id])

  collaboratorCourseLevelDocument CollaboratorCourseLevelDocument[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseLevelId])
}

model CollaboratorCourseLevelDocument {
  id String @id @default(uuid())

  collaboratorId String?
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])

  courseLevelId String

  requiredDocumentId String
  requiredDocument   RequiredDocument @relation(fields: [requiredDocumentId], references: [id])

  documentLink String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([collaboratorId])
  @@index([requiredDocumentId])
}

model Coach {
  id String @id @default(uuid())

  fullname        String
  position        String
  licence         String?
  imgSignatureUrl String?

  certificates Certificate[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
